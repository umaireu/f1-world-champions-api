name: 'Setup'
description: 'Setup Node.js, install dependencies, and create .env file with caching'

inputs:
  # Environment file inputs (optional - only create if provided)
  db-port:
    description: 'Database port'
    required: false
  db-user:
    description: 'Database username'
    required: false
  db-password:
    description: 'Database password'
    required: false
  db-name:
    description: 'Database name'
    required: false
  app-port:
    description: 'Application port'
    required: false
  node-env:
    description: 'Node environment'
    required: false
    default: 'production'
  db-host:
    description: 'Database host'
    required: false
    default: 'postgres'

outputs:
  env-cache-hit:
    description: 'Whether the .env file was restored from cache'
    value: ${{ steps.cache-env.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: ðŸ”§ Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Generate .env cache key
      if: inputs.db-port != '' && inputs.db-user != ''
      id: env-cache-key
      run: |
        # Create a hash based on configuration (not secrets values for security)
        CONFIG_HASH=$(echo "${{ inputs.db-host }}-${{ inputs.db-port }}-${{ inputs.node-env }}-${{ inputs.app-port }}" | sha256sum | cut -d' ' -f1)
        echo "config-hash=${CONFIG_HASH}" >> $GITHUB_OUTPUT
        echo "Generated .env cache key: ${CONFIG_HASH}"
      shell: bash

    - name: Restore .env cache
      if: inputs.db-port != '' && inputs.db-user != ''
      id: cache-env
      uses: actions/cache@v4
      with:
        path: .env
        key: ${{ runner.os }}-env-file-${{ steps.env-cache-key.outputs.config-hash }}
        restore-keys: |
          ${{ runner.os }}-env-file-

    - name: Restore node_modules cache
      id: cache-nodemodules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Create .env file (if needed and cache miss)
      if: inputs.db-port != '' && inputs.db-user != '' && steps.cache-env.outputs.cache-hit != 'true'
      run: |
        cat > .env << EOF
        # Database Configuration
        DB_HOST=${{ inputs.db-host }}
        DB_PORT=${{ inputs.db-port }}
        DB_USER=${{ inputs.db-user }}
        DB_PASSWORD=${{ inputs.db-password }}
        DB_NAME=${{ inputs.db-name }}

        # Application Configuration
        PORT=${{ inputs.app-port }}
        NODE_ENV=${{ inputs.node-env }}
        EOF
        echo "   Created .env file with configuration"
        echo "   â€¢ DB_HOST: ${{ inputs.db-host }}"
        echo "   â€¢ DB_PORT: ${{ inputs.db-port }}"
        echo "   â€¢ PORT: ${{ inputs.app-port }}"
        echo "   â€¢ NODE_ENV: ${{ inputs.node-env }}"
      shell: bash

    - name: Install dependencies (if cache miss)
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: npm ci
      shell: bash

    - name: Setup complete
      run: |
        echo "Setup Summary:"
        echo ""

        # Dependencies status
        if [[ "${{ steps.cache-nodemodules.outputs.cache-hit }}" == "true" ]]; then
          echo "Dependencies: Restored from cache"
        else
          echo "Dependencies: Installed and cached"
        fi

        # Environment file status
        if [[ "${{ inputs.db-port }}" != "" && "${{ inputs.db-user }}" != "" ]]; then
          if [[ "${{ steps.cache-env.outputs.cache-hit }}" == "true" ]]; then
            echo ".env file: Restored from cache"
          else
            echo ".env file: Created and cached"
          fi
        else
          echo ".env file: Skipped (no environment inputs provided)"
        fi

        echo ""
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
      shell: bash
