name: CI Pipeline

permissions:
  contents: read

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  # Stage 1: Install Dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node and install dependencies
        uses: ./.github/actions/setup-node-dependencies

  # Stage 2: Linting
  linting:
    name: Linting
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Run ESLint
        run: npm run lint

  # Stage 3: Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      checks: write

    needs: install-dependencies

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Run tests
        run: npm run test:cov

  # Stage 4: Security
  security:
    name: Security
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test]
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript-typescript'
          upload: true
      - name: Check Dependencies Security
        run: |
          echo "Checking dependencies for security vulnerabilities..."
          if npm audit --audit-level=moderate; then
            echo "✅ No dependency vulnerabilities found"
          else
            echo "❌ Dependency vulnerabilities detected!"
            npm audit --audit-level=moderate
            exit 1
          fi

  # Stage 5: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, security]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Create .env file
        uses: ./.github/actions/create-env-file
        with:
          db-port: ${{ secrets.DB_PORT }}
          db-user: ${{ secrets.DB_USER }}
          db-password: ${{ secrets.DB_PASSWORD }}
          db-name: ${{ secrets.DB_NAME }}
          app-port: ${{ secrets.PORT }}
          node-env: production
          db-host: postgres

      - name: Build application
        run: npm run build

  # Stage 6: Docker Build & Publish
  docker:
    name: Docker Publish
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, security, build]
    # Only run on main/develop branches or tags, not on PRs
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        uses: ./.github/actions/create-env-file
        with:
          db-port: ${{ secrets.DB_PORT }}
          db-user: ${{ secrets.DB_USER }}
          db-password: ${{ secrets.DB_PASSWORD }}
          db-name: ${{ secrets.DB_NAME }}
          app-port: ${{ secrets.PORT }}
          node-env: production
          db-host: postgres

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/f1-world-champions-api
          tags: |
            # Branch-based tags
            type=ref,event=branch
            # Semantic versioning tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Development tag for develop branch
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PORT=3000

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/f1-world-champions-api:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Stage 7: Summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, security, build, docker]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate CI Summary
        uses: ./.github/actions/pipeline-summary
        with:
          install-dependencies-result: ${{ needs.install-dependencies.result }}
          linting-result: ${{ needs.linting.result }}
          test-result: ${{ needs.test.result }}
          security-result: ${{ needs.security.result }}
          build-result: ${{ needs.build.result }}
          docker-result: ${{ needs.docker.result }}
          github-event-name: ${{ github.event_name }}
          github-event-number: ${{ github.event.number }}
          github-base-ref: ${{ github.base_ref }}
          github-ref-name: ${{ github.ref_name }}
          default-branch: ${{ github.event.repository.default_branch }}

      - name: Docker Summary
        if: needs.docker.result != 'skipped'
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.docker.result }}" = "success" ]; then
            echo "### 📦 Published Images" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Registry:** Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "- **Repository:** \`${{ secrets.DOCKERHUB_USERNAME }}/f1-world-champions-api\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚀 Usage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/f1-world-champions-api:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
