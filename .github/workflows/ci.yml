name: CI Pipeline

permissions:
  contents: read

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

# Define once, use selectively
env:
  # Database Configuration
  DB_HOST: postgres
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  # Application Configuration
  APP_PORT: ${{ secrets.PORT }}

jobs:
  # Stage 1: Install Dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Environment
        id: setup
        uses: ./.github/actions/setup-environment
      - name: Install Dependencies
        if: steps.setup.outputs.cache-hit != 'true'
        run: npm ci

  # Stage 2: Linting
  linting:
    name: Linting
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      - name: Run ESLint
        run: npm run lint

  # Stage 3: Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    permissions:
      pull-requests: write
      checks: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      - name: Run tests
        run: npm run test:cov

  # Stage 4: Security
  security:
    name: Security
    runs-on: ubuntu-latest
    needs: [linting, test]
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended,security-and-quality
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript-typescript'
          upload: true
      - name: Check Dependencies Security
        run: |
          echo "Checking dependencies for security vulnerabilities..."
          if npm audit --audit-level=moderate; then
            echo "✅ No dependency vulnerabilities found"
          else
            echo "❌ Dependency vulnerabilities detected!"
            npm audit --audit-level=moderate
            exit 1
          fi

  # Stage 5: Docker Build
  docker-build:
    name: Build
    runs-on: ubuntu-latest
    needs: [linting, test, security]
    env:
      NODE_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=ref,event=pr,prefix=pr-
            type=sha,prefix=main-,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=develop-,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/f1-api-image.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{github.sha}}
          path: /tmp/f1-api-image.tar
          retention-days: 1

  # Stage 6: Docker Publish
  docker-publish:
    name: Docker Publish
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{github.sha}}
          path: /tmp
      - name: Load Docker image
        run: |
          docker load --input /tmp/f1-api-image.tar
          docker image ls -a
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - name: Push Docker image
        run: |
          IMAGE_ID=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | grep "${{ github.event.repository.name }}" | head -1 | awk '{print $2}')
          echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | while read -r tag; do
            if [ ! -z "$tag" ]; then
              echo "Tagging and pushing: $tag"
              docker tag $IMAGE_ID $tag
              docker push $tag
            fi
          done

  # Stage 7: Summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      [
        install-dependencies,
        linting,
        test,
        security,
        docker-build,
        docker-publish,
      ]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate CI Summary
        uses: ./.github/actions/pipeline-summary
        with:
          linting-status: ${{ needs.linting.result }}
          test-status: ${{ needs.test.result }}
          security-status: ${{ needs.security.result }}
          docker-build-status: ${{ needs.docker-build.result }}
          docker-publish-status: ${{ needs.docker-publish.result }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
